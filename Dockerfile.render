# Étape 1 : Build des assets avec Node
FROM node:20 AS node_builder
WORKDIR /app

COPY package.json package-lock.json ./
RUN npm install

COPY . .
RUN npm run build

# Étape 2 : Image finale avec PHP + NGINX
FROM php:8.3-fpm

# Installe NGINX et dépendances PHP
RUN apt-get update && apt-get install -y \
    nginx supervisor git unzip curl libzip-dev libpng-dev libonig-dev \
    && docker-php-ext-install pdo_mysql zip gd \
    && rm -rf /var/lib/apt/lists/*

# Installation de Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Prépare le dossier
WORKDIR /var/www/html

# Copie uniquement les fichiers nécessaires d'abord pour cache build
COPY composer.json composer.lock ./
RUN composer install --no-dev --optimize-autoloader --no-interaction --no-scripts

# Copie le reste du projet Laravel
COPY . .

# Copie le build compilé de l’étape Node
COPY --from=node_builder /app/public/build /var/www/html/public/build

# Crée le lien Ziggy et optimise Laravel
RUN php artisan ziggy:generate \
    && php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache

# Donne les bons droits
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 775 storage bootstrap/cache

# Configuration NGINX + supervisord
COPY ./docker/render/nginx.conf /etc/nginx/sites-available/default
COPY ./docker/render/supervisord.conf /etc/supervisord.conf

# Expose port 80 pour Render
EXPOSE 80

# Lancer nginx + php-fpm avec supervisord
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]